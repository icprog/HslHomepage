@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}


<div>
    <div class="jumbotron" style="background-color:lightcyan">
        <div class="container">
            <div class="row">
                <div class="col-md-6">
                    <div class="jumbotron-content">
                        <br />
                        <p style="text-align:center;font-weight:600;font-size:42px">HslCommunication</p>
                        <p class="summary" style="text-align:center">
                            一个流行的设备采集，程序通讯，跨平台的组件框架
                        </p>
                        <div style="text-align:center">
                            <a class="btn btn-lg btn-success" href="https://github.com/dathlin/HslCommunication/raw/master/Download/HslCommunicationDemo.zip"
                               target="_blank" style="margin-right:10px;">
                                <span class="glyphicon glyphicon-download-alt" aria-hidden="true"></span>&nbsp; Download
                            </a>
                            <a class="btn btn-lg btn-primary" href="https://github.com/dathlin/HslCommunication" target="_blank">
                                <span class="glyphicon glyphicon-tags" aria-hidden="true"></span>&nbsp; Source code
                            </a>
                        </div>
                        <br />
                        <h5 style="text-align:center">
                            Version: <img src="https://img.shields.io/nuget/v/HslCommunication.svg" />
                            &nbsp;-&nbsp;
                            <a href="http://www.cnblogs.com/dathlin/" class="twitter-share-button">cnblogs</a>
                        </h5>
                    </div>
                </div>
                <div class="col-md-6">
                    <div id="carousel-example-generic" class="carousel slide" data-ride="carousel">
                        <ol class="carousel-indicators">
                            <li data-target="#carousel-example-generic" data-slide-to="0" class="active"></li>
                            <li data-target="#carousel-example-generic" data-slide-to="1"></li>
                            <li data-target="#carousel-example-generic" data-slide-to="2"></li>
                        </ol>

                        <!-- Wrapper for slides -->
                        <div class="carousel-inner" role="listbox">
                            <div class="item active" style="background-color:whitesmoke">
                                <pre name="code" class="brush: csharp">
// 三菱PLC通讯，指定PLC的ip地址和端口号
var melsecMc = new MelsecMcNet("192.168.1.110",6000 );
// 连接对象
OperateResult connect = melsecMc.ConnectServer( );
if (!connect.IsSuccess)
{
    Console.WriteLine( "connect failed:" + connect.Message );
    return;
}
// 举例读取D100的值
short D100 = melsecMc.ReadInt16( "D100" ).Content;

melsecMc.ConnectClose( );
</pre>
                            </div>
                            <div class="item" style="background-color:whitesmoke">
                                <pre>
// 西门子PLC通讯，指定PLC的ip地址和端口号
var siemens = new SiemensS7Net(SiemensPLCS.S1200,"192.168.1.110");
// 连接对象
OperateResult connect = siemens.ConnectServer( );
if (!connect.IsSuccess)
{
    Console.WriteLine( "connect failed:" + connect.Message );
    return;
}
// 举例读取M100的值
short M100 = siemens.ReadInt16( "M100" ).Content;

siemens.ConnectClose( );
</pre>
                            </div>
                            <div class="item" style="background-color:whitesmoke">
                                <pre>
// 欧姆龙PLC通讯，指定PLC的ip地址和端口号
var omronFinsNet = new OmronFinsNet("192.168.1.110", 6000);
omronFinsNet.SA1 = 10;
omronFinsNet.DA1 = 110;
// 连接对象
OperateResult connect = omronFinsNet.ConnectServer( );
if (!connect.IsSuccess){
    Console.WriteLine( "connect failed:" + connect.Message );
    return;
}
// 举例读取D100的值
short D100 = omronFinsNet.ReadInt16( "D100" ).Content;
omronFinsNet.ConnectClose( );
</pre>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@await Component.InvokeAsync( "Division", new { description = "测试Demo示例" } )

<div class="container">
    <div class="row">
        <div class="col-md-4">
            <div class="thumbnail">
                <img src="~/images/demo/demo.png" alt="Demo">
                <div class="caption" style="text-align:center">
                    <h4><a href="https://github.com/dathlin/HslCommunication/raw/master/Download/HslCommunicationDemo.zip">Demo 测试项目</a></h4>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="thumbnail">
                <img src="~/images/demo/server.png" alt="server">
                <div class="caption" style="text-align:center">
                    <h4><a href="https://github.com/dathlin/HslCommunication/raw/master/Download/ModbusTcpServer.zip">Modbus Server 项目</a></h4>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="thumbnail">
                <img src="~/images/demo/remote.png" alt="remote">
                <div class="caption" style="text-align:center">
                    <h4><a href="https://github.com/dathlin/RemoteMonitor">server + client + web + android</a></h4>
                </div>
            </div>
        </div>
    </div>
</div>

<br />
@await Component.InvokeAsync( "Division", new { description = "SharpNodeSettings" } )
<div class="container">
    <div class="row">
        <div class="col-md-12">这是一个基于<strong>HslCommunication</strong>组件创建的SDK包，源代码地址：<a href="https://github.com/dathlin/SharpNodeSettings">https://github.com/dathlin/SharpNodeSettings</a>，主要功能实现可配置的，可视化的设备连接信息，设备数据解析规则操作。包含以下三种示例模式</div>
        <div class="col-md-4">
            <div class="thumbnail">
                <img src="~/images/SampleServer.png" alt="SampleServer">
                <div class="caption" style="text-align:center">
                    <h4><a href="https://github.com/dathlin/SharpNodeSettings#sampleserver" target="_blank">SampleServer 项目</a></h4>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="thumbnail">
                <img src="~/images/RedisServer.png" alt="RedisServer">
                <div class="caption" style="text-align:center">
                    <h4><a href="https://github.com/dathlin/SharpNodeSettings#redisserver" target="_blank">RedisServer 项目</a></h4>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="thumbnail">
                <img src="~/images/OpcUaServer.png" alt="OpcUaServer">
                <div class="caption" style="text-align:center">
                    <h4><a href="https://github.com/dathlin/SharpNodeSettings#opcuaserver" target="_blank">OpcUaServer 项目</a></h4>
                </div>
            </div>
        </div>
    </div>
</div>

<br />
@await Component.InvokeAsync( "Division", new { description = "友情链接" } )
<div class="container">
    <div class="row">
        <div class="col-md-4">
            <span style="font-size:28px">IDE Environment</span>
            <ul>
                <li><a href="https://visualstudio.microsoft.com/zh-hans/">源代码及上述的Demo代码使用了 Visual Studio 2017 开发</a></li>
                <li><a href="http://www.jetbrains.com/idea/">Java部分的代码使用了 IntelliJ IDEA 开发</a></li>
                <li><a href="https://code.visualstudio.com/">当然，您也可以通过跨平台的 Visual Studio Code 开发</a></li>
                <li><a href="http://www.android-studio.org/">安卓部分的代码通过 android studio 开发</a></li>
            </ul>
        </div>
        <div class="col-md-4">
            <span style="font-size:28px">相关地址</span>
            <ul>
                <li><a href="https://github.com/dathlin/HslCommunication">源代码地址 : github</a></li>
                <li><a href="https://github.com/dathlin/HslCommunication/blob/master/LICENSE">Lisence: LGPL3.0 (商用免费)</a></li>
                <li><a href="https://www.nuget.org/packages/HslCommunication/">Nuget地址</a></li>
                <li><a href="http://www.cnblogs.com/dathlin/">博客地址</a></li>
                <li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/">C# 指南</a></li>
                <li><a href="https://docs.microsoft.com/zh-cn/dotnet/core/">.NET Core 指南</a></li>
            </ul>
        </div>
        <div class="col-md-4">
            <span style="font-size:28px">博客主要文章</span>
            <ul>
                <li><a href="http://www.cnblogs.com/dathlin/p/7469679.html">三菱PLC的读写</a></li>
                <li><a href="http://www.cnblogs.com/dathlin/p/8685855.html">西门子PLC的读写</a></li>
                <li><a href="http://www.cnblogs.com/dathlin/p/8723961.html">欧姆龙PLC读写</a></li>
                <li><a href="http://www.cnblogs.com/dathlin/p/7885368.html">Modbus Tcp读写</a></li>
                <li><a href="http://www.cnblogs.com/dathlin/p/7782315.html">Modbus服务器开发</a></li>
                <li><a href="http://www.cnblogs.com/dathlin/p/7691693.html">日志记录功能</a></li>
                <li><a href="http://117.48.203.204:8000/html/c136d3de-eab7-9b0f-4bdf-d891297c8018.htm">其他API文档及代码示例</a></li>
            </ul>
        </div>
    </div>
</div>


<br />
@await Component.InvokeAsync( "Division", new { description = "示例教程" } )



@section Scripts{
}